{"ast":null,"code":"import _slicedToArray from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, Platform, _isTestEnvironment } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /** Blocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        var root = this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        var html = this._document.documentElement;\n        var body = this._document.body;\n        var htmlStyle = html.style;\n        var bodyStyle = body.style;\n        var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n        var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n        this._isEnabled = false;\n        htmlStyle.left = this._previousHTMLStyles.left;\n        htmlStyle.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n        // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n        // because it can throw off feature detections in `supportsScrollBehavior` which\n        // checks for `'scrollBehavior' in documentElement.style`.\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n        }\n\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n        if (scrollBehaviorSupported) {\n          htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n          bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n      }\n    }\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      // Since the scroll strategies can't be singletons, we have to use a global CSS class\n      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n      // scrolling multiple times.\n      var html = this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n\n      var body = this._document.body;\n\n      var viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = function () {\n      _this.disable();\n\n      if (_this._overlayRef.hasAttached()) {\n        _this._ngZone.run(function () {\n          return _this._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this2 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n\n      var stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(function () {\n          var scrollPosition = _this2._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this2._initialScrollPosition) > _this2._config.threshold) {\n            _this2._detach();\n          } else {\n            _this2._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n    value:\n    /** Does nothing, as this scroll strategy is a no-op. */\n    function enable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /** Does nothing, as this scroll strategy is a no-op. */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(function (containerBounds) {\n    var outsideAbove = element.bottom < containerBounds.top;\n    var outsideBelow = element.top > containerBounds.bottom;\n    var outsideLeft = element.right < containerBounds.left;\n    var outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(function (scrollContainerRect) {\n    var clippedAbove = element.top < scrollContainerRect.top;\n    var clippedBelow = element.bottom > scrollContainerRect.bottom;\n    var clippedLeft = element.left < scrollContainerRect.left;\n    var clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (!this._scrollSubscription) {\n        var throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n          _this3._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this3._config && _this3._config.autoClose) {\n            var overlayRect = _this3._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this3$_viewportRuler = _this3._viewportRuler.getViewportSize(),\n                width = _this3$_viewportRuler.width,\n                height = _this3$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once\n            // we have a way of exposing the trigger element to the scroll strategy.\n\n\n            var parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this3.disable();\n\n              _this3._ngZone.run(function () {\n                return _this3._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.disable();\n      this._overlayRef = null;\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions = /*#__PURE__*/_createClass(function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this4 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /** Do nothing on scroll. */\n\n  this.noop = function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close = function (config) {\n    return new CloseScrollStrategy(_this4._scrollDispatcher, _this4._ngZone, _this4._viewportRuler, config);\n  };\n  /** Block scrolling. */\n\n\n  this.block = function () {\n    return new BlockScrollStrategy(_this4._viewportRuler, _this4._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition = function (config) {\n    return new RepositionScrollStrategy(_this4._scrollDispatcher, _this4._viewportRuler, _this4._ngZone, config);\n  };\n\n  this._document = document;\n});\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\nScrollStrategyOptions.ctorParameters = function () {\n  return [{\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nvar OverlayConfig = /*#__PURE__*/_createClass(function OverlayConfig(config) {\n  _classCallCheck(this, OverlayConfig);\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /** Custom class to add to the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the overlay has a backdrop. */\n\n  this.hasBackdrop = false;\n  /** Custom class to add to the backdrop */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.disposeOnNavigation = false;\n\n  if (config) {\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    var configKeys = Object.keys(config);\n\n    for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n      var key = _configKeys[_i];\n\n      if (config[key] !== undefined) {\n        // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n        // as \"I don't know *which* key this is, so the only valid value is the intersection\n        // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n        // is not smart enough to see that the right-hand-side is actually an access of the same\n        // exact type with the same exact key, meaning that the value type must be identical.\n        // So we use `any` to work around this.\n        this[key] = config[key];\n      }\n    }\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nvar ConnectionPositionPair = /*#__PURE__*/_createClass(function ConnectionPositionPair(origin, overlay,\n/** Offset along the X axis. */\noffsetX,\n/** Offset along the Y axis. */\noffsetY,\n/** Class(es) to be applied to the panel while this position is active. */\npanelClass) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.panelClass = panelClass;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n});\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nvar ScrollingVisibility = /*#__PURE__*/_createClass(function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n});\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nvar ConnectedOverlayPositionChange = /*#__PURE__*/_createClass(function ConnectedOverlayPositionChange(\n/** The position used as a result of this change. */\nconnectionPair,\n/** @docs-private */\nscrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n});\n\nConnectedOverlayPositionChange.ctorParameters = function () {\n  return [{\n    type: ConnectionPositionPair\n  }, {\n    type: ScrollingVisibility,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar BaseOverlayDispatcher = /*#__PURE__*/function () {\n  function BaseOverlayDispatcher(document) {\n    _classCallCheck(this, BaseOverlayDispatcher);\n\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  _createClass(BaseOverlayDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef);\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      var index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this.detach();\n      }\n    }\n  }]);\n\n  return BaseOverlayDispatcher;\n}();\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function BaseOverlayDispatcher_Factory() {\n    return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT));\n  },\n  token: BaseOverlayDispatcher,\n  providedIn: \"root\"\n});\n\nBaseOverlayDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche) {\n  _inherits(OverlayKeyboardDispatcher, _BaseOverlayDispatche);\n\n  var _super = _createSuper(OverlayKeyboardDispatcher);\n\n  function OverlayKeyboardDispatcher(document) {\n    var _this5;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    _this5 = _super.call(this, document);\n    /** Keyboard event listener that will be attached to the body. */\n\n    _this5._keydownListener = function (event) {\n      var overlays = _this5._attachedOverlays;\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n\n    return _this5;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      _get(_getPrototypeOf(OverlayKeyboardDispatcher.prototype), \"add\", this).call(this, overlayRef); // Lazily start dispatcher once first overlay is added\n\n\n      if (!this._isAttached) {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayKeyboardDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayOutsideClickDispatcher = /*#__PURE__*/function (_BaseOverlayDispatche2) {\n  _inherits(OverlayOutsideClickDispatcher, _BaseOverlayDispatche2);\n\n  var _super2 = _createSuper(OverlayOutsideClickDispatcher);\n\n  function OverlayOutsideClickDispatcher(document, _platform) {\n    var _this6;\n\n    _classCallCheck(this, OverlayOutsideClickDispatcher);\n\n    _this6 = _super2.call(this, document);\n    _this6._platform = _platform;\n    _this6._cursorStyleIsSet = false;\n    /** Store pointerdown event target to track origin of click. */\n\n    _this6._pointerDownListener = function (event) {\n      _this6._pointerDownEventTarget = _getEventTarget(event);\n    };\n    /** Click event listener that will be attached to the body propagate phase. */\n\n\n    _this6._clickListener = function (event) {\n      var target = _getEventTarget(event); // In case of a click event, we want to check the origin of the click\n      // (e.g. in case where a user starts a click inside the overlay and\n      // releases the click outside of it).\n      // This is done by using the event target of the preceding pointerdown event.\n      // Every click event caused by a pointer device has a preceding pointerdown\n      // event, unless the click was programmatically triggered (e.g. in a unit test).\n\n\n      var origin = event.type === 'click' && _this6._pointerDownEventTarget ? _this6._pointerDownEventTarget : target; // Reset the stored pointerdown event target, to avoid having it interfere\n      // in subsequent events.\n\n      _this6._pointerDownEventTarget = null; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      var overlays = _this6._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      for (var i = overlays.length - 1; i > -1; i--) {\n        var overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n        // and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n          break;\n        }\n\n        overlayRef._outsidePointerEvents.next(event);\n      }\n    };\n\n    return _this6;\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  _createClass(OverlayOutsideClickDispatcher, [{\n    key: \"add\",\n    value: function add(overlayRef) {\n      _get(_getPrototypeOf(OverlayOutsideClickDispatcher.prototype), \"add\", this).call(this, overlayRef); // Safari on iOS does not generate click events for non-interactive\n      // elements. However, we want to receive a click for any element outside\n      // the overlay. We can force a \"clickable\" state by setting\n      // `cursor: pointer` on the document body. See:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n      // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n\n      if (!this._isAttached) {\n        var body = this._document.body;\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true); // click event is not fired on iOS. To make element \"clickable\" we are\n        // setting the cursor to pointer\n\n        if (this._platform.IOS && !this._cursorStyleIsSet) {\n          this._cursorOriginalValue = body.style.cursor;\n          body.style.cursor = 'pointer';\n          this._cursorStyleIsSet = true;\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._isAttached) {\n        var body = this._document.body;\n        body.removeEventListener('pointerdown', this._pointerDownListener, true);\n        body.removeEventListener('click', this._clickListener, true);\n        body.removeEventListener('auxclick', this._clickListener, true);\n        body.removeEventListener('contextmenu', this._clickListener, true);\n\n        if (this._platform.IOS && this._cursorStyleIsSet) {\n          body.style.cursor = this._cursorOriginalValue;\n          this._cursorStyleIsSet = false;\n        }\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayOutsideClickDispatcher;\n}(BaseOverlayDispatcher);\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OverlayOutsideClickDispatcher_Factory() {\n    return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n  },\n  token: OverlayOutsideClickDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayOutsideClickDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Container inside which all overlays will render. */\n\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  function OverlayContainer(document, _platform) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var container = this._containerElement;\n\n      if (container && container.parentNode) {\n        container.parentNode.removeChild(container);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var containerClass = 'cdk-overlay-container'; // TODO(crisbeto): remove the testing check once we have an overlay testing\n      // module or Angular starts tearing down the testing `NgModule`. See:\n      // https://github.com/angular/angular/issues/18831\n\n      if (this._platform.isBrowser || _isTestEnvironment()) {\n        var oppositePlatformContainers = this._document.querySelectorAll(\".\".concat(containerClass, \"[platform=\\\"server\\\"], \") + \".\".concat(containerClass, \"[platform=\\\"test\\\"]\")); // Remove any old containers from the opposite platform.\n        // This can happen when transitioning from the server to the client.\n\n\n        for (var i = 0; i < oppositePlatformContainers.length; i++) {\n          oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n        }\n      }\n\n      var container = this._document.createElement('div');\n\n      container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n      // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n      // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n      // To mitigate the problem we made it so that only containers from a different platform are\n      // cleared, but the side-effect was that people started depending on the overly-aggressive\n      // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n      // module which does the cleanup, we try to detect that we're in a test environment and we\n      // always clear the container. See #17006.\n      // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n      if (_isTestEnvironment()) {\n        container.setAttribute('platform', 'test');\n      } else if (!this._platform.isBrowser) {\n        container.setAttribute('platform', 'server');\n      }\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\nOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nvar OverlayRef = /*#__PURE__*/function () {\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    var _this7 = this;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = function (event) {\n      return _this7._backdropClick.next(event);\n    };\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  _createClass(OverlayRef, [{\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      var _this8 = this;\n\n      var attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.\n\n\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.attach(this);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this8.hasAttached()) {\n          _this8.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this);\n\n      if (this._config.disposeOnNavigation) {\n        this._locationChanges = this._location.subscribe(function () {\n          return _this8.dispose();\n        });\n      }\n\n      this._outsideClickDispatcher.add(this);\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._positionStrategy && this._positionStrategy.detach) {\n        this._positionStrategy.detach();\n      }\n\n      if (this._scrollStrategy) {\n        this._scrollStrategy.disable();\n      }\n\n      var detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n      // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n      this._detachContentWhenStable();\n\n      this._locationChanges.unsubscribe();\n\n      this._outsideClickDispatcher.remove(this);\n\n      return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var isAttached = this.hasAttached();\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._disposeScrollStrategy();\n\n      this._disposeBackdrop(this._backdropElement);\n\n      this._locationChanges.unsubscribe();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      this._outsidePointerEvents.complete();\n\n      this._outsideClickDispatcher.remove(this);\n\n      if (this._host && this._host.parentNode) {\n        this._host.parentNode.removeChild(this._host);\n\n        this._host = null;\n      }\n\n      this._previousHostParent = this._pane = null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n\n  }, {\n    key: \"outsidePointerEvents\",\n    value: function outsidePointerEvents() {\n      return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._positionStrategy) {\n        this._positionStrategy.apply();\n      }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n\n  }, {\n    key: \"updatePositionStrategy\",\n    value: function updatePositionStrategy(strategy) {\n      if (strategy === this._positionStrategy) {\n        return;\n      }\n\n      if (this._positionStrategy) {\n        this._positionStrategy.dispose();\n      }\n\n      this._positionStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        this.updatePosition();\n      }\n    }\n    /** Update the size properties of the overlay. */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n      this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign(Object.assign({}, this._config), {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, true);\n      }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      if (this._pane) {\n        this._toggleClasses(this._pane, classes, false);\n      }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n\n  }, {\n    key: \"updateScrollStrategy\",\n    value: function updateScrollStrategy(strategy) {\n      if (strategy === this._scrollStrategy) {\n        return;\n      }\n\n      this._disposeScrollStrategy();\n\n      this._scrollStrategy = strategy;\n\n      if (this.hasAttached()) {\n        strategy.attach(this);\n        strategy.enable();\n      }\n    }\n    /** Updates the text direction of the overlay panel. */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      if (!this._pane) {\n        return;\n      }\n\n      var style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this9 = this;\n\n      var showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      } // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n\n\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            if (_this9._backdropElement) {\n              _this9._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this10 = this;\n\n      var backdropToDetach = this._backdropElement;\n\n      if (!backdropToDetach) {\n        return;\n      }\n\n      var timeoutId;\n\n      var finishDetach = function finishDetach() {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach) {\n          backdropToDetach.removeEventListener('click', _this10._backdropClickHandler);\n          backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n          _this10._disposeBackdrop(backdropToDetach);\n        }\n\n        if (_this10._config.backdropClass) {\n          _this10._toggleClasses(backdropToDetach, _this10._config.backdropClass, false);\n        }\n\n        clearTimeout(timeoutId);\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      this._ngZone.runOutsideAngular(function () {\n        backdropToDetach.addEventListener('transitionend', finishDetach);\n      }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n\n\n      backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n\n      timeoutId = this._ngZone.runOutsideAngular(function () {\n        return setTimeout(finishDetach, 500);\n      });\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      var classList = element.classList;\n      coerceArray(cssClasses).forEach(function (cssClass) {\n        // We can't do a spread here, because IE doesn't support setting multiple classes.\n        // Also trying to add an empty string to a DOMTokenList will throw.\n        if (cssClass) {\n          isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        }\n      });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n\n  }, {\n    key: \"_detachContentWhenStable\",\n    value: function _detachContentWhenStable() {\n      var _this11 = this;\n\n      // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n      // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n      // be patched to run inside the zone, which will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(function () {\n        // We can't remove the host here immediately, because the overlay pane's content\n        // might still be animating. This stream helps us avoid interrupting the animation\n        // by waiting for the pane to become empty.\n        var subscription = _this11._ngZone.onStable.pipe(takeUntil(merge(_this11._attachments, _this11._detachments))).subscribe(function () {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!_this11._pane || !_this11._host || _this11._pane.children.length === 0) {\n            if (_this11._pane && _this11._config.panelClass) {\n              _this11._toggleClasses(_this11._pane, _this11._config.panelClass, false);\n            }\n\n            if (_this11._host && _this11._host.parentElement) {\n              _this11._previousHostParent = _this11._host.parentElement;\n\n              _this11._previousHostParent.removeChild(_this11._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n      });\n    }\n    /** Disposes of a scroll strategy. */\n\n  }, {\n    key: \"_disposeScrollStrategy\",\n    value: function _disposeScrollStrategy() {\n      var scrollStrategy = this._scrollStrategy;\n\n      if (scrollStrategy) {\n        scrollStrategy.disable();\n\n        if (scrollStrategy.detach) {\n          scrollStrategy.detach();\n        }\n      }\n    }\n    /** Removes a backdrop element from the DOM. */\n\n  }, {\n    key: \"_disposeBackdrop\",\n    value: function _disposeBackdrop(backdrop) {\n      if (backdrop) {\n        if (backdrop.parentNode) {\n          backdrop.parentNode.removeChild(backdrop);\n        } // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n\n\n        if (this._backdropElement === backdrop) {\n          this._backdropElement = null;\n        }\n      }\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var _this12 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add(boundingBoxClass);\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n      this._isDisposed = false;\n      this._isInitialRender = true;\n      this._lastPosition = null;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n        // When the window is resized, we want to trigger the next reposition as if it\n        // was an initial render, in order for the strategy to pick a new optimal position,\n        // otherwise position locking will cause it to stay at the old one.\n        _this12._isInitialRender = true;\n\n        _this12.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      if (this._isDisposed || !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._clearPanelClasses();\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      var originRect = this._originRect;\n      var overlayRect = this._overlayRect;\n      var viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n      var flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n      var fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n          var originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n          // overlay in this position. We use the top-left corner for calculations and later translate\n          // this into an appropriate (top, left, bottom, right) style.\n\n\n          var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n          var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        var bestFit = null;\n        var bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n            var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(bestFit.position, bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(fallback.position, fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._clearPanelClasses();\n\n      this._lastPosition = null;\n      this._previousPushAmount = null;\n\n      this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed) {\n        return;\n      } // We can't use `_resetBoundingBoxStyles` here, because it resets\n      // some properties to zero, rather than removing them.\n\n\n      if (this._boundingBox) {\n        extendStyles(this._boundingBox.style, {\n          top: '',\n          left: '',\n          right: '',\n          bottom: '',\n          height: '',\n          width: '',\n          alignItems: '',\n          justifyContent: ''\n        });\n      }\n\n      if (this._pane) {\n        this._resetOverlayElementStyles();\n      }\n\n      if (this._overlayRef) {\n        this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n      }\n\n      this.detach();\n\n      this._positionChanges.complete();\n\n      this._overlayRef = this._boundingBox = null;\n      this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        var lastPosition = this._lastPosition || this._preferredPositions[0];\n\n        var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._scrollables = scrollables;\n      return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(this._lastPosition) === -1) {\n        this._lastPosition = null;\n      }\n\n      this._validatePositions();\n\n      return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      this._viewportMargin = margin;\n      return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._growAfterOpen = growAfterOpen;\n      return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._canPush = canPush;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._positionLocked = isLocked;\n      return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      this._offsetX = offset;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      this._offsetY = offset;\n      return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      this._transformOriginSelector = selector;\n      return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, pos) {\n      var x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        var startX = this._isRtl() ? originRect.right : originRect.left;\n        var endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      }\n\n      var y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      // Calculate the (overlayStartX, overlayStartY), the start of the\n      // potential overlay position relative to the origin point.\n      var overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n\n      var overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, rawOverlayRect, viewport, position) {\n      // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var x = point.x,\n          y = point.y;\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      } // How much the overlay would overflow at this position, on each side.\n\n\n      var leftOverflow = 0 - x;\n      var rightOverflow = x + overlay.width - viewport.width;\n      var topOverflow = 0 - y;\n      var bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n      var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n      var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n      var visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        var availableHeight = viewport.bottom - point.y;\n        var availableWidth = viewport.right - point.x;\n        var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n        var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n        var verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        var horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n\n      return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n      // If the position is locked and we've pushed the overlay already, reuse the previous push\n      // amount, rather than pushing it again. If we were to continue pushing, the element would\n      // remain in the viewport, which goes against the expectations when position locking is enabled.\n      if (this._previousPushAmount && this._positionLocked) {\n        return {\n          x: start.x + this._previousPushAmount.x,\n          y: start.y + this._previousPushAmount.y\n        };\n      } // Round the overlay rect when comparing against the\n      // viewport, because the viewport is always rounded.\n\n\n      var overlay = getRoundedBoundingClientRect(rawOverlayRect);\n      var viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n      // side, which we'll use to decide which direction to push it.\n\n      var overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n      var overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n      var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n      var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n      var pushX = 0;\n      var pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width <= viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n      }\n\n      if (overlay.height <= viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n      }\n\n      this._previousPushAmount = {\n        x: pushX,\n        y: pushY\n      };\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position);\n\n      if (position.panelClass) {\n        this._addPanelClasses(position.panelClass);\n      } // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculcations can be somewhat expensive.\n\n      if (this._positionChanges.observers.length) {\n        var scrollableViewProperties = this._getScrollVisibility();\n\n        var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n\n      var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n      var xOrigin;\n      var yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      var viewport = this._viewportRect;\n\n      var isRtl = this._isRtl();\n\n      var height, top, bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.height - top + this._viewportMargin;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        // If neither top nor bottom, it means that the overlay is vertically centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n        // `origin.y - viewport.top`.\n        var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n        var previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n      var isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n      var isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      var width, left, right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.width - origin.x + this._viewportMargin;\n        width = origin.x - this._viewportMargin;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        // If neither start nor end, it means that the overlay is horizontally centered on the\n        // origin point. Note that we want the position relative to the viewport, rather than\n        // the page, which is why we don't use something like `viewport.right - origin.x` and\n        // `origin.x - viewport.left`.\n        var _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n\n        var previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      var boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n\n      var styles = {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n        styles.width = styles.height = '100%';\n      } else {\n        var maxHeight = this._overlayRef.getConfig().maxHeight;\n\n        var maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(this._boundingBox.style, {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style, {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: '',\n        transform: ''\n      });\n    }\n    /** Sets positioning styles to the overlay element. */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      var styles = {};\n\n      var hasExactPosition = this._hasExactPosition();\n\n      var hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n      var config = this._overlayRef.getConfig();\n\n      if (hasExactPosition) {\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n      } else {\n        styles.position = 'static';\n      } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n      // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n      // off the position. We also can't use margins, because they won't have an effect in some\n      // cases where the element doesn't have anything to \"push off of\". Finally, this works\n      // better both with flexible and non-flexible positioning.\n\n\n      var transformString = '';\n\n      var offsetX = this._getOffset(position, 'x');\n\n      var offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n      // Note that this doesn't apply when we have an exact position, in which case we do want to\n      // apply them because they'll be cleared from the bounding box.\n\n      if (config.maxHeight) {\n        if (hasExactPosition) {\n          styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n        } else if (hasFlexibleDimensions) {\n          styles.maxHeight = '';\n        }\n      }\n\n      if (config.maxWidth) {\n        if (hasExactPosition) {\n          styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n        } else if (hasFlexibleDimensions) {\n          styles.maxWidth = '';\n        }\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the\n      // preferred position has changed since the last `apply`.\n      var styles = {\n        top: '',\n        bottom: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      }\n\n      var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n      // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n\n\n      overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n      if (position.overlayY === 'bottom') {\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n        var documentHeight = this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint, scrollPosition) {\n      // Reset any existing styles. This is necessary in case the preferred position has\n      // changed since the last `apply`.\n      var styles = {\n        left: '',\n        right: ''\n      };\n\n      var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n      } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n      // or \"after\" the origin, which determines the direction in which the element will expand.\n      // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n      // page is in RTL or LTR.\n\n\n      var horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        var documentWidth = this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      // Note: needs fresh rects since the position could've changed.\n      var originBounds = this._getOriginRect();\n\n      var overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n      // every time, we should be able to use the scrollTop of the containers if the size of those\n      // containers hasn't changed.\n\n\n      var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n      // and `innerHeight` that do. This is necessary, because the overlay container uses\n      // 100% `width` and `height` which don't include the scrollbar either.\n      var width = this._document.documentElement.clientWidth;\n      var height = this._document.documentElement.clientHeight;\n\n      var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /** Whether the we're dealing with an RTL context */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._preferredPositions.length) {\n          throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        } // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n\n\n        this._preferredPositions.forEach(function (pair) {\n          validateHorizontalPosition('originX', pair.originX);\n          validateVerticalPosition('originY', pair.originY);\n          validateHorizontalPosition('overlayX', pair.overlayX);\n          validateVerticalPosition('overlayY', pair.overlayY);\n        });\n      }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n  }, {\n    key: \"_addPanelClasses\",\n    value: function _addPanelClasses(cssClasses) {\n      var _this13 = this;\n\n      if (this._pane) {\n        coerceArray(cssClasses).forEach(function (cssClass) {\n          if (cssClass !== '' && _this13._appliedPanelClasses.indexOf(cssClass) === -1) {\n            _this13._appliedPanelClasses.push(cssClass);\n\n            _this13._pane.classList.add(cssClass);\n          }\n        });\n      }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n  }, {\n    key: \"_clearPanelClasses\",\n    value: function _clearPanelClasses() {\n      var _this14 = this;\n\n      if (this._pane) {\n        this._appliedPanelClasses.forEach(function (cssClass) {\n          _this14._pane.classList.remove(cssClass);\n        });\n\n        this._appliedPanelClasses = [];\n      }\n    }\n    /** Returns the ClientRect of the current origin. */\n\n  }, {\n    key: \"_getOriginRect\",\n    value: function _getOriginRect() {\n      var origin = this._origin;\n\n      if (origin instanceof ElementRef) {\n        return origin.nativeElement.getBoundingClientRect();\n      } // Check for Element so SVG elements are also supported.\n\n\n      if (origin instanceof Element) {\n        return origin.getBoundingClientRect();\n      }\n\n      var width = origin.width || 0;\n      var height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n      return {\n        top: origin.y,\n        bottom: origin.y + height,\n        left: origin.x,\n        right: origin.x + width,\n        height: height,\n        width: width\n      };\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    var _input$split = input.split(cssUnitPattern),\n        _input$split2 = _slicedToArray(_input$split, 2),\n        value = _input$split2[0],\n        units = _input$split2[1];\n\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\n\n\nvar ConnectedPositionStrategy = /*#__PURE__*/function () {\n  function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n    _classCallCheck(this, ConnectedPositionStrategy);\n\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  _createClass(ConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      this._overlayRef = overlayRef;\n\n      this._positionStrategy.attach(overlayRef);\n\n      if (this._direction) {\n        overlayRef.setDirection(this._direction);\n        this._direction = null;\n      }\n    }\n    /** Disposes all resources used by the position strategy. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n\n  }, {\n    key: \"recalculateLastPosition\",\n    value: function recalculateLastPosition() {\n      this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n\n  }, {\n    key: \"withFallbackPosition\",\n    value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n      var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n      this._preferredPositions.push(position);\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(dir) {\n      // Since the direction might be declared before the strategy is attached,\n      // we save the value in a temporary property and we'll transfer it to the\n      // overlay ref on attachment.\n      if (this._overlayRef) {\n        this._overlayRef.setDirection(dir);\n      } else {\n        this._direction = dir;\n      }\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n\n  }, {\n    key: \"withOffsetX\",\n    value: function withOffsetX(offset) {\n      this._positionStrategy.withDefaultOffsetX(offset);\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n\n  }, {\n    key: \"withOffsetY\",\n    value: function withOffsetY(offset) {\n      this._positionStrategy.withDefaultOffsetY(offset);\n\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition(isLocked) {\n      this._positionStrategy.withLockedPosition(isLocked);\n\n      return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions.slice();\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._positionStrategy.setOrigin(origin);\n\n      return this;\n    }\n  }]);\n\n  return ConnectedPositionStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\n\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add(wrapperClass);\n      this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._bottomOffset = '';\n      this._topOffset = value;\n      this._alignItems = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._rightOffset = '';\n      this._leftOffset = value;\n      this._justifyContent = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._topOffset = '';\n      this._bottomOffset = value;\n      this._alignItems = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._leftOffset = '';\n      this._rightOffset = value;\n      this._justifyContent = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        this._width = value;\n      }\n\n      return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        this._height = value;\n      }\n\n      return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.left(offset);\n      this._justifyContent = 'center';\n      return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.top(offset);\n      this._alignItems = 'center';\n      return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parentStyles = this._overlayRef.hostElement.style;\n\n      var config = this._overlayRef.getConfig();\n\n      var width = config.width,\n          height = config.height,\n          maxWidth = config.maxWidth,\n          maxHeight = config.maxHeight;\n      var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n      var shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n      styles.position = this._cssPosition;\n      styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n      styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = this._rightOffset;\n\n      if (shouldBeFlushHorizontally) {\n        parentStyles.justifyContent = 'flex-start';\n      } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n      } else if (this._overlayRef.getConfig().direction === 'rtl') {\n        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n        // don't want that because our positioning is explicitly `left` and `right`, hence\n        // why we do another inversion to ensure that the overlay stays in the same position.\n        // TODO: reconsider this if we add `start` and `end` methods.\n        if (this._justifyContent === 'flex-start') {\n          parentStyles.justifyContent = 'flex-end';\n        } else if (this._justifyContent === 'flex-end') {\n          parentStyles.justifyContent = 'flex-start';\n        }\n      } else {\n        parentStyles.justifyContent = this._justifyContent;\n      }\n\n      parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._isDisposed || !this._overlayRef) {\n        return;\n      }\n\n      var styles = this._overlayRef.overlayElement.style;\n      var parent = this._overlayRef.hostElement;\n      var parentStyles = parent.style;\n      parent.classList.remove(wrapperClass);\n      parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n      this._overlayRef = null;\n      this._isDisposed = true;\n    }\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Builder for overlay position strategy. */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(elementRef, originPos, overlayPos) {\n      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(origin) {\n      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\nOverlayPositionBuilder.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: OverlayContainer\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Next overlay unique ID. */\n\n\nvar nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  function Overlay(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      var host = this._createHostElement();\n\n      var pane = this._createPaneElement(host);\n\n      var portalOutlet = this._createPortalOutlet(pane);\n\n      var overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      var pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      var host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher));\n};\n\nOverlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n\nOverlay.ctorParameters = function () {\n  return [{\n    type: ScrollStrategyOptions\n  }, {\n    type: OverlayContainer\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: OverlayPositionBuilder\n  }, {\n    type: OverlayKeyboardDispatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Directionality\n  }, {\n    type: Location\n  }, {\n    type: OverlayOutsideClickDispatcher\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nvar defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin = /*#__PURE__*/_createClass(function CdkOverlayOrigin(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n});\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n\nCdkOverlayOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    },\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    },\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    },\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    },\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n  }, {\n    key: \"flexibleDimensions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    },\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    },\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    },\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /** The element's layout direction. */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._attachSubscription.unsubscribe();\n\n      this._detachSubscription.unsubscribe();\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /** Creates an overlay */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this15 = this;\n\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      var overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._attachSubscription = overlayRef.attachments().subscribe(function () {\n        return _this15.attach.emit();\n      });\n      this._detachSubscription = overlayRef.detachments().subscribe(function () {\n        return _this15.detach.emit();\n      });\n      overlayRef.keydownEvents().subscribe(function (event) {\n        _this15.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE && !_this15.disableClose && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          _this15._detachOverlay();\n        }\n      });\n\n      this._overlayRef.outsidePointerEvents().subscribe(function (event) {\n        _this15.overlayOutsideClick.next(event);\n      });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      var positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n      var overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n  }, {\n    key: \"_updatePositionStrategy\",\n    value: function _updatePositionStrategy(positionStrategy) {\n      var _this16 = this;\n\n      var positions = this.positions.map(function (currentPosition) {\n        return {\n          originX: currentPosition.originX,\n          originY: currentPosition.originY,\n          overlayX: currentPosition.overlayX,\n          overlayY: currentPosition.overlayY,\n          offsetX: currentPosition.offsetX || _this16.offsetX,\n          offsetY: currentPosition.offsetY || _this16.offsetY,\n          panelClass: currentPosition.panelClass || undefined\n        };\n      });\n      return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n      this._updatePositionStrategy(strategy);\n\n      return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this17 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n          _this17.backdropClick.emit(event);\n        });\n      } else {\n        this._backdropSubscription.unsubscribe();\n      }\n\n      this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n      // together all the information for it can be expensive.\n\n\n      if (this.positionChange.observers.length > 0) {\n        this._positionSubscription = this._position.positionChanges.pipe(takeWhile(function () {\n          return _this17.positionChange.observers.length > 0;\n        })).subscribe(function (position) {\n          _this17.positionChange.emit(position);\n\n          if (_this17.positionChange.observers.length === 0) {\n            _this17._positionSubscription.unsubscribe();\n          }\n        });\n      }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n      }\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkConnectedOverlay.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  positionStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositionStrategy']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  disableClose: [{\n    type: Input,\n    args: ['cdkConnectedOverlayDisableClose']\n  }],\n  transformOriginSelector: [{\n    type: Input,\n    args: ['cdkConnectedOverlayTransformOriginOn']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }],\n  overlayOutsideClick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar OverlayModule = /*#__PURE__*/_createClass(function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n});\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function declarations() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function imports() {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super3 = _createSuper(FullscreenOverlayContainer);\n\n  function FullscreenOverlayContainer(_document, platform) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super3.call(this, _document, platform);\n  }\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this18 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(function () {\n        return _this18._adjustParentForFullscreenChange();\n      });\n    }\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n\n      var fullscreenElement = this.getFullscreenElement();\n      var parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      var eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        var _document = this._document;\n\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      var _document = this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FullscreenOverlayContainer_Factory() {\n    return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n  },\n  token: FullscreenOverlayContainer,\n  providedIn: \"root\"\n});\n\nFullscreenOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };","map":{"version":3,"sources":["/home/multiplier/Documentos/Gabriel Brelaz/painel-angular-gabrielbrelaz.com/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js"],"names":["i1","ScrollDispatcher","ViewportRuler","ScrollingModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","i1$1","DOCUMENT","Location","i0","Injectable","NgZone","Inject","Optional","ElementRef","ApplicationRef","ComponentFactoryResolver","Injector","InjectionToken","Directive","EventEmitter","TemplateRef","ViewContainerRef","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i2","supportsScrollBehavior","_getEventTarget","Platform","_isTestEnvironment","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","take","takeUntil","takeWhile","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ɵsetClassMetadata","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayKeyboardDispatcher_Factory","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","target","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","OverlayOutsideClickDispatcher_Factory","OverlayContainer","container","_containerElement","parentNode","removeChild","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayContainer_Factory","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_scrollStrategy","attach","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","_disposeBackdrop","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","forEach","cssClass","subscription","children","backdrop","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","Element","destination","source","hasOwnProperty","input","split","units","parseFloat","clientRect","floor","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","changes","_attachOverlay","_detachOverlay","create","_buildConfig","attachments","emit","detachments","keydownEvents","keyCode","preventDefault","outsidePointerEvents","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","withTransformOriginOn","transformOriginSelector","flexibleConnectedTo","_createOverlay","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_d"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, Platform, _isTestEnvironment } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            if (backdrop.parentNode) {\n                backdrop.parentNode.removeChild(backdrop);\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n"]},"metadata":{},"sourceType":"module"}