{"version":3,"file":"firebase-twitter.strategy.js","sourceRoot":"","sources":["../../../../../../.ng_build/firebase-auth/strategies/twitter/firebase-twitter.strategy.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAc,IAAI,EAAE,MAAM,MAAM,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAGvD,OAAO,EAAE,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;AACxE,OAAO,EAAE,yCAAyC,EAAE,MAAM,qDAAqD,CAAC;AAEhH,OAAO,QAAQ,MAAM,cAAc,CAAC;AACpC,OAAO,eAAe,CAAC;AAGvB,MAAM,OAAO,wBAAyB,SAAQ,sBAAsB;IADpE;;QAGY,mBAAc,GAA8C,IAAI,yCAAyC,EAAE,CAAC;IAiBxH,CAAC;IAfC,MAAM,CAAC,KAAK,CAAC,OAAkD;QAC7D,OAAO,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY,CAAC,IAAU;QACrB,MAAM,MAAM,GAAG,cAAc,CAAC;QAC9B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzD,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAEjE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC/C,IAAI,CACH,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,EACpD,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CACxD,CAAC;IACN,CAAC;;;YAnBF,UAAU","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { NbAuthStrategyClass, NbAuthResult, NbAuthStrategyOptions } from '@nebular/auth';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport { NbFirebaseIdentityProviderStrategyOptions } from '../base/firebase-identity-provider-strategy.options';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\n@Injectable()\nexport class NbFirebaseTwitteStrategy extends NbFirebaseBaseStrategy {\n\n  protected defaultOptions: NbFirebaseIdentityProviderStrategyOptions = new NbFirebaseIdentityProviderStrategyOptions();\n\n  static setup(options: NbFirebaseIdentityProviderStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebaseTwitteStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'authenticate';\n    const provider = new firebase.auth.TwitterAuthProvider();\n    provider.setCustomParameters(this.getOption('customParameters'));\n\n    return from(this.afAuth.signInWithPopup(provider))\n      .pipe(\n        switchMap((res) => this.processSuccess(res, module)),\n        catchError(error => this.processFailure(error, module)),\n      );\n  }\n}\n"]}