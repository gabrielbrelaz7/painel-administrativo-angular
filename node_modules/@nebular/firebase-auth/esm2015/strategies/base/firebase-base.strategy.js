/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { of as observableOf, from } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { NbAuthResult, NbAuthIllegalTokenError, NbAuthStrategy } from '@nebular/auth';
export class NbFirebaseBaseStrategy extends NbAuthStrategy {
    constructor(afAuth) {
        super();
        this.afAuth = afAuth;
    }
    logout() {
        const module = 'logout';
        return from(this.afAuth.signOut())
            .pipe(map(() => {
            return new NbAuthResult(true, null, this.getOption(`${module}.redirect.success`), [], this.getOption(`${module}.defaultMessages`));
        }), catchError((error) => this.processFailure(error, module)));
    }
    register(data) {
        throw new Error(`'register' is not supported by '${this.constructor.name}', use 'authenticate'.`);
    }
    requestPassword(data) {
        throw new Error(`'requestPassword' is not supported by '${this.constructor.name}', use 'authenticate'.`);
    }
    resetPassword(data = {}) {
        throw new Error(`'resetPassword' is not supported by '${this.constructor.name}', use 'authenticate'.`);
    }
    refreshToken(data = {}) {
        throw new Error(`'refreshToken' is not supported by '${this.constructor.name}', use 'authenticate'.`);
    }
    processFailure(error, module) {
        const errorMessages = [];
        if (error instanceof NbAuthIllegalTokenError) {
            errorMessages.push(error.message);
        }
        else {
            errorMessages.push(this.getOption('errors.getter')(module, error, this.options));
        }
        return observableOf(new NbAuthResult(false, error, this.getOption(`${module}.redirect.failure`), errorMessages, []));
    }
    processSuccess(res, module) {
        return this.afAuth.idToken
            .pipe(map(token => {
            return new NbAuthResult(true, res, this.getOption(`${module}.redirect.success`), [], this.getOption('messages.getter')(module, res, this.options), this.createToken(token));
        }));
    }
}
NbFirebaseBaseStrategy.decorators = [
    { type: Injectable }
];
NbFirebaseBaseStrategy.ctorParameters = () => [
    { type: AngularFireAuth }
];
//# sourceMappingURL=firebase-base.strategy.js.map