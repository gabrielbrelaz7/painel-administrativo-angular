{"version":3,"file":"firebase-password.strategy.js","sourceRoot":"","sources":["../../../../../../.ng_build/firebase-auth/strategies/password/firebase-password.strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport firebase from 'firebase/app';\nimport { Observable, of as observableOf, from } from 'rxjs';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { NbAuthStrategyOptions, NbAuthStrategyClass, NbAuthResult } from '@nebular/auth';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport {\n  firebasePasswordStrategyOptions,\n  NbFirebasePasswordStrategyOptions,\n} from './firebase-password-strategy.options';\n\n\n@Injectable()\nexport class NbFirebasePasswordStrategy extends NbFirebaseBaseStrategy {\n\n  protected defaultOptions: NbFirebasePasswordStrategyOptions = firebasePasswordStrategyOptions;\n\n  static setup(options: NbFirebasePasswordStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebasePasswordStrategy, options];\n  }\n\n  authenticate({ email, password }: any): Observable<NbAuthResult> {\n    const module = 'login';\n    return from(this.afAuth.signInWithEmailAndPassword(email, password))\n      .pipe(\n        switchMap((res) => this.processSuccess(res, module)),\n        catchError((error) => this.processFailure(error, module)),\n      );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    const module = 'refreshToken';\n    return this.afAuth.authState\n      .pipe(\n        take(1),\n        switchMap(user => {\n          if (user == null) {\n            return observableOf(new NbAuthResult(\n              false,\n              null,\n              this.getOption(`${module}.redirect.failure`),\n              ['There is no logged in user so refresh of id token isn\\'t possible'],\n            ));\n          }\n          return this.refreshIdToken(user, module);\n        }),\n      );\n  }\n\n  register({ email, password }: any): Observable<NbAuthResult> {\n    const module = 'register';\n    return from(this.afAuth.createUserWithEmailAndPassword(email, password))\n      .pipe(\n        switchMap((res) => this.processSuccess(res, module)),\n        catchError((error) => this.processFailure(error, module)),\n      );\n  }\n\n  requestPassword({ email }: any): Observable<NbAuthResult> {\n    const module = 'requestPassword';\n    return from(this.afAuth.sendPasswordResetEmail(email))\n      .pipe(\n        map(() => {\n          return new NbAuthResult(\n            true,\n            null,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption(`${module}.defaultMessages`),\n          );\n        }),\n        catchError((error) => this.processFailure(error, module)),\n      );\n  }\n\n  resetPassword({ code, password }): Observable<NbAuthResult> {\n    const module = 'resetPassword';\n    return from(this.afAuth.confirmPasswordReset(code, password))\n      .pipe(\n        map(() => {\n          return new NbAuthResult(\n            true,\n            null,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption(`${module}.defaultMessages`),\n          );\n        }),\n        catchError((error) => this.processFailure(error, module)),\n      );\n  }\n\n  protected updatePassword(user, password, module) {\n    return from(user.updatePassword(password))\n      .pipe(\n        map(token => {\n          return new NbAuthResult(\n            true,\n            null,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption(`${module}.defaultMessages`),\n            this.createToken(token),\n          );\n        }),\n        catchError(error => this.processFailure(error, module)),\n      );\n  }\n\n  protected refreshIdToken(user: firebase.User, module): Observable<NbAuthResult> {\n    return from(user.getIdToken(true))\n      .pipe(\n        map(token => {\n          return new NbAuthResult(\n            true,\n            null,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption(`${module}.defaultMessages`),\n            this.createToken(token),\n          );\n        }),\n        catchError(error => this.processFailure(error, module)),\n      );\n  }\n}\n"]}