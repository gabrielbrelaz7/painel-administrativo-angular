(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@angular/fire/auth'), require('rxjs'), require('rxjs/operators'), require('@nebular/auth'), require('firebase/app'), require('firebase/auth')) :
	typeof define === 'function' && define.amd ? define(['exports', 'tslib', '@angular/core', '@angular/fire/auth', 'rxjs', 'rxjs/operators', '@nebular/auth', 'firebase/app', 'firebase/auth'], factory) :
	(factory((global.nb = global.nb || {}, global.nb['firebase-auth'] = global.nb['firebase-auth'] || {}),global.tslib,global.ng.core,global.ng.fire.auth,global.Rx,global.Rx.operators,global.nb.auth,global.firebase.app));
}(this, (function (exports,tslib,_angular_core,_angular_fire_auth,rxjs,rxjs_operators,_nebular_auth,firebase) { 'use strict';

firebase = firebase && 'default' in firebase ? firebase['default'] : firebase;

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseBaseStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFirebaseBaseStrategy, _super);
    function NbFirebaseBaseStrategy(afAuth) {
        var _this = _super.call(this) || this;
        _this.afAuth = afAuth;
        return _this;
    }
    NbFirebaseBaseStrategy.prototype.logout = function () {
        var _this = this;
        var module = 'logout';
        return rxjs.from(this.afAuth.signOut())
            .pipe(rxjs_operators.map(function () {
            return new _nebular_auth.NbAuthResult(true, null, _this.getOption(module + ".redirect.success"), [], _this.getOption(module + ".defaultMessages"));
        }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebaseBaseStrategy.prototype.register = function (data) {
        throw new Error("'register' is not supported by '" + this.constructor.name + "', use 'authenticate'.");
    };
    NbFirebaseBaseStrategy.prototype.requestPassword = function (data) {
        throw new Error("'requestPassword' is not supported by '" + this.constructor.name + "', use 'authenticate'.");
    };
    NbFirebaseBaseStrategy.prototype.resetPassword = function (data) {
        if (data === void 0) { data = {}; }
        throw new Error("'resetPassword' is not supported by '" + this.constructor.name + "', use 'authenticate'.");
    };
    NbFirebaseBaseStrategy.prototype.refreshToken = function (data) {
        if (data === void 0) { data = {}; }
        throw new Error("'refreshToken' is not supported by '" + this.constructor.name + "', use 'authenticate'.");
    };
    NbFirebaseBaseStrategy.prototype.processFailure = function (error, module) {
        var errorMessages = [];
        if (error instanceof _nebular_auth.NbAuthIllegalTokenError) {
            errorMessages.push(error.message);
        }
        else {
            errorMessages.push(this.getOption('errors.getter')(module, error, this.options));
        }
        return rxjs.of(new _nebular_auth.NbAuthResult(false, error, this.getOption(module + ".redirect.failure"), errorMessages, []));
    };
    NbFirebaseBaseStrategy.prototype.processSuccess = function (res, module) {
        var _this = this;
        return this.afAuth.idToken
            .pipe(rxjs_operators.map(function (token) {
            return new _nebular_auth.NbAuthResult(true, res, _this.getOption(module + ".redirect.success"), [], _this.getOption('messages.getter')(module, res, _this.options), _this.createToken(token));
        }));
    };
    NbFirebaseBaseStrategy.decorators = [
        { type: _angular_core.Injectable }
    ];
    NbFirebaseBaseStrategy.ctorParameters = function () { return [
        { type: _angular_fire_auth.AngularFireAuth }
    ]; };
    return NbFirebaseBaseStrategy;
}(_nebular_auth.NbAuthStrategy));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebasePasswordStrategyOptions = /** @class */ (function (_super) {
    tslib.__extends(NbFirebasePasswordStrategyOptions, _super);
    function NbFirebasePasswordStrategyOptions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.token = {
            class: _nebular_auth.NbAuthJWTToken,
        };
        _this.register = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['You have been successfully registered.'],
        };
        _this.login = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Login/Email combination is not correct, please try again.'],
            defaultMessages: ['You have been successfully logged in.'],
        };
        _this.logout = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['You have been successfully logged out.'],
        };
        _this.refreshToken = {
            redirect: {
                success: null,
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['Your token has been successfully refreshed.'],
        };
        _this.requestPassword = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['Reset password instructions have been sent to your email.'],
        };
        _this.resetPassword = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['Your password has been successfully changed.'],
        };
        _this.errors = {
            key: 'message',
            getter: function (module, res, options) { return _nebular_auth.getDeepFromObject(res, options.errors.key, options[module].defaultErrors); },
        };
        _this.messages = {
            key: 'messages',
            getter: function (module, res, options) { return _nebular_auth.getDeepFromObject(res.body, options.messages.key, options[module].defaultMessages); },
        };
        return _this;
    }
    return NbFirebasePasswordStrategyOptions;
}(_nebular_auth.NbAuthStrategyOptions));
// tslint:disable-next-line:max-line-length
var firebasePasswordStrategyOptions = new NbFirebasePasswordStrategyOptions();

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebasePasswordStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFirebasePasswordStrategy, _super);
    function NbFirebasePasswordStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = firebasePasswordStrategyOptions;
        return _this;
    }
    NbFirebasePasswordStrategy.setup = function (options) {
        return [NbFirebasePasswordStrategy, options];
    };
    NbFirebasePasswordStrategy.prototype.authenticate = function (_a) {
        var _this = this;
        var email = _a.email, password = _a.password;
        var module = 'login';
        return rxjs.from(this.afAuth.signInWithEmailAndPassword(email, password))
            .pipe(rxjs_operators.switchMap(function (res) { return _this.processSuccess(res, module); }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.prototype.refreshToken = function (data) {
        var _this = this;
        var module = 'refreshToken';
        return this.afAuth.authState
            .pipe(rxjs_operators.take(1), rxjs_operators.switchMap(function (user) {
            if (user == null) {
                return rxjs.of(new _nebular_auth.NbAuthResult(false, null, _this.getOption(module + ".redirect.failure"), ['There is no logged in user so refresh of id token isn\'t possible']));
            }
            return _this.refreshIdToken(user, module);
        }));
    };
    NbFirebasePasswordStrategy.prototype.register = function (_a) {
        var _this = this;
        var email = _a.email, password = _a.password;
        var module = 'register';
        return rxjs.from(this.afAuth.createUserWithEmailAndPassword(email, password))
            .pipe(rxjs_operators.switchMap(function (res) { return _this.processSuccess(res, module); }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.prototype.requestPassword = function (_a) {
        var _this = this;
        var email = _a.email;
        var module = 'requestPassword';
        return rxjs.from(this.afAuth.sendPasswordResetEmail(email))
            .pipe(rxjs_operators.map(function () {
            return new _nebular_auth.NbAuthResult(true, null, _this.getOption(module + ".redirect.success"), [], _this.getOption(module + ".defaultMessages"));
        }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.prototype.resetPassword = function (_a) {
        var _this = this;
        var code = _a.code, password = _a.password;
        var module = 'resetPassword';
        return rxjs.from(this.afAuth.confirmPasswordReset(code, password))
            .pipe(rxjs_operators.map(function () {
            return new _nebular_auth.NbAuthResult(true, null, _this.getOption(module + ".redirect.success"), [], _this.getOption(module + ".defaultMessages"));
        }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.prototype.updatePassword = function (user, password, module) {
        var _this = this;
        return rxjs.from(user.updatePassword(password))
            .pipe(rxjs_operators.map(function (token) {
            return new _nebular_auth.NbAuthResult(true, null, _this.getOption(module + ".redirect.success"), [], _this.getOption(module + ".defaultMessages"), _this.createToken(token));
        }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.prototype.refreshIdToken = function (user, module) {
        var _this = this;
        return rxjs.from(user.getIdToken(true))
            .pipe(rxjs_operators.map(function (token) {
            return new _nebular_auth.NbAuthResult(true, null, _this.getOption(module + ".redirect.success"), [], _this.getOption(module + ".defaultMessages"), _this.createToken(token));
        }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebasePasswordStrategy.decorators = [
        { type: _angular_core.Injectable }
    ];
    return NbFirebasePasswordStrategy;
}(NbFirebaseBaseStrategy));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseIdentityProviderStrategyOptions = /** @class */ (function (_super) {
    tslib.__extends(NbFirebaseIdentityProviderStrategyOptions, _super);
    function NbFirebaseIdentityProviderStrategyOptions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.token = {
            class: _nebular_auth.NbAuthJWTToken,
        };
        _this.logout = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['You have been successfully logged out.'],
        };
        _this.authenticate = {
            redirect: {
                success: '/',
                failure: null,
            },
            defaultErrors: ['Something went wrong, please try again.'],
            defaultMessages: ['You have been successfully authenticated.'],
        };
        _this.errors = {
            key: 'message',
            getter: function (module, res, options) { return options[module].defaultErrors; },
        };
        _this.messages = {
            key: 'message',
            getter: function (module, res, options) {
                return options[module].defaultMessages;
            },
        };
        _this.scopes = [];
        _this.customParameters = {};
        return _this;
    }
    return NbFirebaseIdentityProviderStrategyOptions;
}(_nebular_auth.NbAuthStrategyOptions));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseGoogleStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFirebaseGoogleStrategy, _super);
    function NbFirebaseGoogleStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = new NbFirebaseIdentityProviderStrategyOptions();
        return _this;
    }
    NbFirebaseGoogleStrategy.setup = function (options) {
        return [NbFirebaseGoogleStrategy, options];
    };
    NbFirebaseGoogleStrategy.prototype.authenticate = function (data) {
        var _this = this;
        var module = 'authenticate';
        var provider = new firebase.auth.GoogleAuthProvider();
        var scopes = this.getOption('scopes');
        scopes.forEach(function (scope) { return provider.addScope(scope); });
        provider.setCustomParameters(this.getOption('customParameters'));
        return rxjs.from(this.afAuth.signInWithPopup(provider))
            .pipe(rxjs_operators.switchMap(function (res) { return _this.processSuccess(res, module); }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebaseGoogleStrategy.decorators = [
        { type: _angular_core.Injectable }
    ];
    return NbFirebaseGoogleStrategy;
}(NbFirebaseBaseStrategy));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseFacebookStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFirebaseFacebookStrategy, _super);
    function NbFirebaseFacebookStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = new NbFirebaseIdentityProviderStrategyOptions();
        return _this;
    }
    NbFirebaseFacebookStrategy.setup = function (options) {
        return [NbFirebaseFacebookStrategy, options];
    };
    NbFirebaseFacebookStrategy.prototype.authenticate = function (data) {
        var _this = this;
        var module = 'authenticate';
        var provider = new firebase.auth.FacebookAuthProvider();
        var scopes = this.getOption('scopes');
        scopes.forEach(function (scope) { return provider.addScope(scope); });
        provider.setCustomParameters(this.getOption('customParameters'));
        return rxjs.from(this.afAuth.signInWithPopup(provider))
            .pipe(rxjs_operators.switchMap(function (res) { return _this.processSuccess(res, module); }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebaseFacebookStrategy.decorators = [
        { type: _angular_core.Injectable }
    ];
    return NbFirebaseFacebookStrategy;
}(NbFirebaseBaseStrategy));

/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseTwitteStrategy = /** @class */ (function (_super) {
    tslib.__extends(NbFirebaseTwitteStrategy, _super);
    function NbFirebaseTwitteStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = new NbFirebaseIdentityProviderStrategyOptions();
        return _this;
    }
    NbFirebaseTwitteStrategy.setup = function (options) {
        return [NbFirebaseTwitteStrategy, options];
    };
    NbFirebaseTwitteStrategy.prototype.authenticate = function (data) {
        var _this = this;
        var module = 'authenticate';
        var provider = new firebase.auth.TwitterAuthProvider();
        provider.setCustomParameters(this.getOption('customParameters'));
        return rxjs.from(this.afAuth.signInWithPopup(provider))
            .pipe(rxjs_operators.switchMap(function (res) { return _this.processSuccess(res, module); }), rxjs_operators.catchError(function (error) { return _this.processFailure(error, module); }));
    };
    NbFirebaseTwitteStrategy.decorators = [
        { type: _angular_core.Injectable }
    ];
    return NbFirebaseTwitteStrategy;
}(NbFirebaseBaseStrategy));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbFirebaseAuthModule = /** @class */ (function () {
    function NbFirebaseAuthModule() {
    }
    NbFirebaseAuthModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    providers: [
                        NbFirebasePasswordStrategy,
                        NbFirebaseGoogleStrategy,
                        NbFirebaseFacebookStrategy,
                        NbFirebaseTwitteStrategy,
                    ],
                },] }
    ];
    return NbFirebaseAuthModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

/**
 * Generated bundle index. Do not edit.
 */

exports.NbFirebaseBaseStrategy = NbFirebaseBaseStrategy;
exports.NbFirebasePasswordStrategy = NbFirebasePasswordStrategy;
exports.NbFirebasePasswordStrategyOptions = NbFirebasePasswordStrategyOptions;
exports.firebasePasswordStrategyOptions = firebasePasswordStrategyOptions;
exports.NbFirebaseIdentityProviderStrategyOptions = NbFirebaseIdentityProviderStrategyOptions;
exports.NbFirebaseGoogleStrategy = NbFirebaseGoogleStrategy;
exports.NbFirebaseFacebookStrategy = NbFirebaseFacebookStrategy;
exports.NbFirebaseTwitteStrategy = NbFirebaseTwitteStrategy;
exports.NbFirebaseAuthModule = NbFirebaseAuthModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
