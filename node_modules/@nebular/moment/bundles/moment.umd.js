(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@angular/common'), require('@nebular/theme'), require('moment')) :
	typeof define === 'function' && define.amd ? define(['exports', 'tslib', '@angular/core', '@angular/common', '@nebular/theme', 'moment'], factory) :
	(factory((global.nb = global.nb || {}, global.nb.moment = global.nb.moment || {}),global.tslib,global.ng.core,global.ng.common,global.nb.theme,global.moment));
}(this, (function (exports,tslib,_angular_core,_angular_common,_nebular_theme,_rollupMoment) { 'use strict';

var _rollupMoment__default = _rollupMoment['default'];

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
// @ts-ignore
var moment = _rollupMoment__default || _rollupMoment;
var NbMomentDateService = /** @class */ (function (_super) {
    tslib.__extends(NbMomentDateService, _super);
    function NbMomentDateService(locale) {
        var _this = _super.call(this) || this;
        _this.TIME_ONLY_FORMAT_KEY = 'LT';
        _this.setLocale(locale);
        return _this;
    }
    NbMomentDateService.prototype.setLocale = function (locale) {
        _super.prototype.setLocale.call(this, locale);
        this.setMomentLocaleData(locale);
    };
    NbMomentDateService.prototype.setHours = function (date, hour) {
        return this.clone(date).set({ hour: hour });
    };
    NbMomentDateService.prototype.setMinutes = function (date, minute) {
        return this.clone(date).set({ minute: minute });
    };
    NbMomentDateService.prototype.setSeconds = function (date, second) {
        return this.clone(date).set({ second: second });
    };
    NbMomentDateService.prototype.setMilliseconds = function (date, milliseconds) {
        return this.clone(date).set({ milliseconds: milliseconds });
    };
    NbMomentDateService.prototype.addDay = function (date, days) {
        return this.clone(date).add({ days: days });
    };
    NbMomentDateService.prototype.addMonth = function (date, months) {
        return this.clone(date).add({ months: months });
    };
    NbMomentDateService.prototype.addYear = function (date, years) {
        return this.clone(date).add({ years: years });
    };
    NbMomentDateService.prototype.addMinutes = function (date, minute) {
        return this.clone(date).add({ minute: minute });
    };
    NbMomentDateService.prototype.addHours = function (date, hour) {
        return this.clone(date).add({ hour: hour });
    };
    NbMomentDateService.prototype.clone = function (date) {
        return date.clone().locale(this.locale);
    };
    NbMomentDateService.prototype.valueOf = function (date) {
        return date.valueOf();
    };
    NbMomentDateService.prototype.compareDates = function (date1, date2) {
        return this.getYear(date1) - this.getYear(date2) ||
            this.getMonth(date1) - this.getMonth(date2) ||
            this.getDate(date1) - this.getDate(date2);
    };
    NbMomentDateService.prototype.createDate = function (year, month, date) {
        return moment([year, month, date]);
    };
    NbMomentDateService.prototype.format = function (date, format) {
        if (date) {
            return date.format(format || this.localeData.defaultFormat);
        }
        return '';
    };
    NbMomentDateService.prototype.getLocaleTimeFormat = function () {
        return moment.localeData().longDateFormat(this.TIME_ONLY_FORMAT_KEY);
    };
    NbMomentDateService.prototype.getDate = function (date) {
        return this.clone(date).date();
    };
    NbMomentDateService.prototype.getDayOfWeek = function (date) {
        return this.clone(date).day();
    };
    NbMomentDateService.prototype.getDayOfWeekNames = function (style) {
        if (style === void 0) { style = _angular_common.TranslationWidth.Narrow; }
        return this.localeData.days[style];
    };
    NbMomentDateService.prototype.getFirstDayOfWeek = function () {
        return this.localeData.firstDayOfWeek;
    };
    NbMomentDateService.prototype.getMonth = function (date) {
        return date.month();
    };
    NbMomentDateService.prototype.getHours = function (date) {
        return date.hour();
    };
    NbMomentDateService.prototype.getMinutes = function (date) {
        return date.minute();
    };
    NbMomentDateService.prototype.getSeconds = function (date) {
        return date.second();
    };
    NbMomentDateService.prototype.getMilliseconds = function (date) {
        return date.milliseconds();
    };
    NbMomentDateService.prototype.getMonthEnd = function (date) {
        return this.clone(date).endOf('month');
    };
    NbMomentDateService.prototype.getMonthName = function (date, style) {
        if (style === void 0) { style = _angular_common.TranslationWidth.Abbreviated; }
        var month = this.getMonth(date);
        return this.getMonthNameByIndex(month, style);
    };
    NbMomentDateService.prototype.getMonthNameByIndex = function (month, style) {
        if (style === void 0) { style = _angular_common.TranslationWidth.Abbreviated; }
        return this.localeData.months[style][month];
    };
    NbMomentDateService.prototype.getMonthStart = function (date) {
        return this.clone(date).startOf('month');
    };
    NbMomentDateService.prototype.getNumberOfDaysInMonth = function (date) {
        return this.clone(date).daysInMonth();
    };
    NbMomentDateService.prototype.getYear = function (date) {
        return this.clone(date).year();
    };
    NbMomentDateService.prototype.getYearEnd = function (date) {
        return this.clone(date).endOf('year');
    };
    NbMomentDateService.prototype.getYearStart = function (date) {
        return this.clone(date).startOf('year');
    };
    NbMomentDateService.prototype.isSameDay = function (date1, date2) {
        return this.isSameMonth(date1, date2) && this.getDate(date1) === this.getDate(date2);
    };
    NbMomentDateService.prototype.isSameMonth = function (date1, date2) {
        return this.isSameYear(date1, date2) && this.getMonth(date1) === this.getMonth(date2);
    };
    NbMomentDateService.prototype.isSameYear = function (date1, date2) {
        return this.getYear(date1) === this.getYear(date2);
    };
    NbMomentDateService.prototype.isValidDateString = function (date, format) {
        return moment(date, format).isValid();
    };
    NbMomentDateService.prototype.isValidTimeString = function (date, format) {
        return moment(date, format, true).isValid();
    };
    NbMomentDateService.prototype.parse = function (date, format) {
        return moment(date, format);
    };
    NbMomentDateService.prototype.today = function () {
        return moment();
    };
    NbMomentDateService.prototype.getId = function () {
        return 'moment';
    };
    NbMomentDateService.prototype.setMomentLocaleData = function (locale) {
        var _a, _b;
        var momentLocaleData = moment.localeData(locale);
        this.localeData = {
            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),
            defaultFormat: momentLocaleData.longDateFormat('L'),
            months: (_a = {},
                _a[_angular_common.TranslationWidth.Abbreviated] = momentLocaleData.monthsShort(),
                _a[_angular_common.TranslationWidth.Wide] = momentLocaleData.months(),
                _a),
            days: (_b = {},
                _b[_angular_common.TranslationWidth.Wide] = momentLocaleData.weekdays(),
                _b[_angular_common.TranslationWidth.Short] = momentLocaleData.weekdaysShort(),
                _b[_angular_common.TranslationWidth.Narrow] = momentLocaleData.weekdaysMin(),
                _b),
        };
    };
    NbMomentDateService.prototype.getWeekNumber = function (date) {
        return date.week();
    };
    NbMomentDateService.prototype.getDateFormat = function () {
        return 'YYYY-MM-DD';
    };
    NbMomentDateService.prototype.getTwelveHoursFormat = function () {
        return 'hh:mm A';
    };
    NbMomentDateService.decorators = [
        { type: _angular_core.Injectable }
    ];
    NbMomentDateService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] }] }
    ]; };
    return NbMomentDateService;
}(_nebular_theme.NbDateService));

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var NbMomentDateModule = /** @class */ (function () {
    function NbMomentDateModule() {
    }
    NbMomentDateModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    providers: [{ provide: _nebular_theme.NbDateService, useClass: NbMomentDateService }],
                },] }
    ];
    return NbMomentDateModule;
}());

/*
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */

/**
 * Generated bundle index. Do not edit.
 */

exports.NbMomentDateService = NbMomentDateService;
exports.NbMomentDateModule = NbMomentDateModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
